// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nftid", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("type", Value.fromBoolean(false));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("contract", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save nft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save nft entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("nft", id.toString(), this);
    }
  }

  static load(id: string): nft | null {
    return changetype<nft | null>(store.get("nft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftid(): BigInt {
    let value = this.get("nftid");
    return value!.toBigInt();
  }

  set nftid(value: BigInt) {
    this.set("nftid", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get type(): boolean {
    let value = this.get("type");
    return value!.toBoolean();
  }

  set type(value: boolean) {
    this.set("type", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (!value) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(<string>value));
    }
  }
}

export class nftamount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("locked", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save nftamount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save nftamount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("nftamount", id.toString(), this);
    }
  }

  static load(id: string): nftamount | null {
    return changetype<nftamount | null>(store.get("nftamount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get locked(): BigInt {
    let value = this.get("locked");
    return value!.toBigInt();
  }

  set locked(value: BigInt) {
    this.set("locked", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class user extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save user entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save user entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("user", id.toString(), this);
    }
  }

  static load(id: string): user | null {
    return changetype<user | null>(store.get("user", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nfts(): Array<string> | null {
    let value = this.get("nfts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nfts(value: Array<string> | null) {
    if (!value) {
      this.unset("nfts");
    } else {
      this.set("nfts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get aureus(): BigInt | null {
    let value = this.get("aureus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set aureus(value: BigInt | null) {
    if (!value) {
      this.unset("aureus");
    } else {
      this.set("aureus", Value.fromBigInt(<BigInt>value));
    }
  }

  get minerid(): string | null {
    let value = this.get("minerid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minerid(value: string | null) {
    if (!value) {
      this.unset("minerid");
    } else {
      this.set("minerid", Value.fromString(<string>value));
    }
  }

  get townhall(): BigInt | null {
    let value = this.get("townhall");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set townhall(value: BigInt | null) {
    if (!value) {
      this.unset("townhall");
    } else {
      this.set("townhall", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class miner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("locked", Value.fromBoolean(false));
    this.set("lastcollected", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save miner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save miner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("miner", id.toString(), this);
    }
  }

  static load(id: string): miner | null {
    return changetype<miner | null>(store.get("miner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get locked(): boolean {
    let value = this.get("locked");
    return value!.toBoolean();
  }

  set locked(value: boolean) {
    this.set("locked", Value.fromBoolean(value));
  }

  get townhall(): BigInt | null {
    let value = this.get("townhall");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set townhall(value: BigInt | null) {
    if (!value) {
      this.unset("townhall");
    } else {
      this.set("townhall", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastcollected(): BigInt {
    let value = this.get("lastcollected");
    return value!.toBigInt();
  }

  set lastcollected(value: BigInt) {
    this.set("lastcollected", Value.fromBigInt(value));
  }
}
